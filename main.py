import keep_alive
keep_alive.keep_alive()
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import logging

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ Secrets
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@evgentests")
BOT_USERNAME = os.getenv("BOT_USERNAME", "your_bot_username")  # –±–µ–∑ @

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

cards = {
    "card_1": {
        "image": "https://postimg.cc/fVr1XPS0",
        "text": "üåø *–ó–µ–ª—ë–Ω—ã–π —á–µ–ª–æ–≤–µ–∫*\n–°–∏–º–≤–æ–ª –¥—Ä–µ–≤–Ω–µ–π –º—É–¥—Ä–æ—Å—Ç–∏ –ø—Ä–∏—Ä–æ–¥—ã. –û–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º –º–∏—Ä–æ–º. –ü–æ—è–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–æ—Å—Ç–∞."
    },
    "card_2": {
        "image": "https://postimg.cc/fJkGLZJh",
        "text": "üåï *–û–±–æ—Ä–æ—Ç–µ–Ω—å*\n–û–ª–∏—Ü–µ—Ç–≤–æ—Ä—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ —Å–∫—Ä—ã—Ç—ã–µ –∂–µ–ª–∞–Ω–∏—è. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–≤–æ–µ–π —Ç–µ–Ω–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º."
    },
    "card_3": {
        "image": "https://postimg.cc/py0NRyVZ",
        "text": "üåä *–ö–µ–ª–ø–∏*\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫—Ä—ã—Ç—ã—Ö –æ–ø–∞—Å–Ω–æ—Å—Ç—è—Ö –∏ –∏–ª–ª—é–∑–∏—è—Ö. –ö–µ–ª–ø–∏ –º–∞–Ω–∏—Ç —Å–≤–æ–µ–π –∫—Ä–∞—Å–æ—Ç–æ–π, –Ω–æ –º–æ–∂–µ—Ç —É—Ç–∞—â–∏—Ç—å –≤ –≥–ª—É–±–∏–Ω—ã. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Ç–µ–º, —á—Ç–æ –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º ‚Äî –∑–∞ —Ñ–∞—Å–∞–¥–æ–º –º–æ–∂–µ—Ç —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –Ω–µ—á—Ç–æ –∏–Ω–æ–µ."
    },
    "card_4": {
        "image": "https://i.postimg.cc/d13p9jQD/Photo-Room-20250521-200551.png",
        "text": "üëë *–ö–æ—Ä–æ–ª—å —ç–ª—å—Ñ–æ–≤*\n–í–æ–ø–ª–æ—â–µ–Ω–∏–µ –≤–ª–∞—Å—Ç–∏, –∫—Ä–∞—Å–æ—Ç—ã –∏ –º–∞–≥–∏–∏. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–∏–ª–µ –∏ –º—É–¥—Ä–æ—Å—Ç–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø–æ—Ä–æ–≥–µ –≤–∞–∂–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è, –∏ –ö–æ—Ä–æ–ª—å —ç–ª—å—Ñ–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–µ–π –∏ –æ–ø—ã—Ç–æ–º."
    },
    "card_5": {
        "image": "https://postimg.cc/mPHKYwYX",
        "text": "üåç *–ê–Ω–≥–µ–ª –∑–µ–º–ª–∏*\n–°–∏–º–≤–æ–ª —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, –∑–∞—â–∏—Ç—ã –∏ —Å–≤—è–∑–∏ —Å –º–∞—Ç–µ—Ä–∏–µ–π. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–∑–µ–º–ª–µ–Ω–∏—è –∏ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–≤–æ–∏—Ö –ø–æ–∑–∏—Ü–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–∏–º –∫–æ—Ä–Ω—è–º, –Ω–∞–π–¥–∏—Ç–µ –æ–ø–æ—Ä—É –≤ —Å–µ–±–µ –∏ –æ–∫—Ä—É–∂–∞—é—â–µ–º –º–∏—Ä–µ."
    }
}

def get_private_keyboard():
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã: –ø—Ä—è–º—ã–µ callback
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 1", callback_data='card_1'),
         InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 2", callback_data='card_2')],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 3", callback_data='card_3'),
         InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 4", callback_data='card_4')],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 5", callback_data='card_5')]
    ])

def get_callback_keyboard():
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∏—á–∫–∏: –æ–±—ã—á–Ω—ã–µ callback_data
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 1", callback_data='card_1'),
         InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 2", callback_data='card_2')],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 3", callback_data='card_3'),
         InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 4", callback_data='card_4')],
        [InlineKeyboardButton("–ö–∞—Ä—Ç–∞ 5", callback_data='card_5')]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_photo(
        photo="https://postimg.cc/TKQZwQYs",
        caption="üåø –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—è—Ç–∏ –∫–∞—Ä—Ç –∏ –ø–æ–ª—É—á–∏ –ø–æ—Å–ª–∞–Ω–∏–µ –æ—Ç —Å–∏–ª –ø—Ä–∏—Ä–æ–¥—ã:",
        reply_markup=get_callback_keyboard()
    )

async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ª–∏—á–∫—É
    await context.bot.send_photo(
        chat_id=CHANNEL_ID,
        photo="https://postimg.cc/TKQZwQYs",
        caption="üåø –î—É—Ö–∏ –ª–µ—Å–æ–≤, —Ç–µ–Ω–µ–π –∏ –≤–µ—Ç—Ä–∞ —Ä—è–¥–æ–º. –í–æ–ª—à–µ–±–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî —Ç–æ–∂–µ. –û–Ω–∏ –Ω–µ –∫—Ä–∏—á–∞—Ç, –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞—é—Ç—Å—è. –ü—Ä–æ—Å—Ç–æ –∂–¥—É—Ç, –ø–æ–∫–∞ —Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –∏ —É—Å–ª—ã—à–∏—à—å –∏—Ö.\n\nüåí –ó–∞–∫—Ä–æ–π –≥–ª–∞–∑–∞. –û—Ç–ø—É—Å—Ç–∏ –º—ã—Å–ª–∏. –°–º–æ—Ç—Ä–∏ –Ω–∞ –∫–∞—Ä—Ç—ã ‚Äî –Ω–µ —É–º–æ–º, –∞ —Ç–µ–º —á—Ç–æ –≥–ª—É–±–∂–µ. –ö–∞–∫–∞—è –∏–∑ –Ω–∏—Ö —Ç—è–Ω–µ—Ç—Å—è –∫ —Ç–µ–±–µ? –ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è —à–µ–ø—á–µ—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç?",
        reply_markup=get_private_keyboard()
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data in cards:
        try:
            logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {data}")
            card = cards[data]
            logging.info(f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {card['image']}")
            await context.bot.send_photo(
                chat_id=user_id,
                photo=card["image"],
                caption=card["text"],
                parse_mode='Markdown'
            )
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–∞—Ä—Ç—ã {data}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã {data}: {e}")
            await query.answer("‚ùó –ù–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ", show_alert=True)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("post", post))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == "__main__":
    main()